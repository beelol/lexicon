#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

var models = require('../models')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const eraseDatabaseOnSync = true;

models.connectDb().then(async () => {

  if (eraseDatabaseOnSync) {
    await Promise.all([
      models.all.Counter.deleteMany({}),
      models.all.Item.deleteMany({}),
    ]);

    createCounter();
    createItem();
  }

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

const createCounter = async () => {
  const defaultCounter = new models.all.Counter({
    count: 10,
  });

  await defaultCounter.save();
};

const createItem = async () => {
  const defaultItem = new models.all.Item({
    name: "Enforcer - With Bolters Cannons",
    image: "https://vignette.wikia.nocookie.net/wiredforwar/images/f/f7/AGK3HVY.jpg/revision/latest/scale-to-width-down/100?cb=20130901010959",
    properties: [
      {name: "HP", value: 70},
      {name: "Armor", value: 60}
    ]
  });

  await defaultItem.save();
};


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
